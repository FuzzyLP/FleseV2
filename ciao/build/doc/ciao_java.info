INFO-DIR-SECTION Ciao
START-INFO-DIR-ENTRY
* ciao_java: (ciao_java). Prolog/Java Bidirectional Interface.
END-INFO-DIR-ENTRY
This is ciao_java.info.tmp, produced by makeinfo version 6.1 from
javall_doc.texic.

Copyright (C) 1996-2002 Jesu's Correas Ferna'ndez/The CLIP Group.

This document may be freely read, stored, reproduced, disseminated,
translated or quoted by any means and on any medium provided the
following conditions are met:

  1. Every reader or user of this document acknowledges that is aware
     that no guarantee is given regarding its contents, on any account,
     and specifically concerning veracity, accuracy and fitness for any
     purpose.

  2. No modification is made other than cosmetic, change of
     representation format, translation, correction of obvious syntactic
     errors, or as permitted by the clauses below.

  3. Comments and other additions may be inserted, provided they clearly
     appear as such; translations or fragments must clearly refer to an
     original complete version, preferably one that is easily accessed
     whenever possible.

  4. Translations, comments and other additions or modifications must be
     dated and their author(s) must be identifiable (possibly via an
     alias).

  5. This licence is preserved and applies to the whole document with
     modifications and additions (except for brief quotes),
     independently of the representation format.

  6. Any reference to the "official version", "original version" or "how
     to obtain original versions" of the document is preserved verbatim.
     Any copyright notice in the document is preserved verbatim.  Also,
     the title and author(s) of the original document should be clearly
     mentioned as such.

  7. In the case of translations, verbatim sentences mentioned in (6.)
     are preserved in the language of the original document accompanied
     by verbatim translations to the language of the traslated document.
     All translations state clearly that the author is not responsible
     for the translated work.  This license is included, at least in the
     language in which it is referenced in the original version.

  8. Whatever the mode of storage, reproduction or dissemination, anyone
     able to access a digitized version of this document must be able to
     make a digitized copy in a format directly usable, and if possible
     editable, according to accepted, and publicly documented, public
     standards.

  9. Redistributing this document to a third party requires simultaneous
     redistribution of this licence, without modification, and in
     particular without any further condition or restriction, expressed
     or implied, related or not to this redistribution.  In particular,
     in case of inclusion in a database or collection, the owner or the
     manager of the database or the collection renounces any right
     related to this inclusion and concerning the possible uses of the
     document after extraction from the database or the collection,
     whether alone or in relation with other documents.

Any incompatibility of the above clauses with legal, contractual or
judiciary decisions or constraints implies a corresponding limitation of
reading, usage, or redistribution rights for this document, verbatim or
modified.


File: ciao_java.info.tmp,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

Prolog/Java Bidirectional Interface
***********************************

This manual includes the complete reference to the low-level Prolog to
Java interface.  This interface allows a Prolog program to start a Java
process and manipulate Java objects.

In this document we present an interface between Ciao Prolog and Java to
take advantage of the capabilities of the java programming language,
avoiding problems related to compile-time linking, system dependencies,
and static references.  This interface fully achieves the objectives
using a simple but powerful protocol between both languages.  The
communication is established by means of sockets, allowing the processes
to be in separated machines, and thus providing a means for distributed
processing.

* Menu:

* Introduction::
* Prolog to Java interface::
* Java to Prolog interface::
* Low-level Prolog to Java socket connection::

Indexes

* Library/Module Index::
* Predicate Index::
* Property Index::
* Regular Type Index::
* Declaration Index::
* Concept Index::
* Author Index::
* Global Index::


File: ciao_java.info.tmp,  Node: Introduction,  Next: Prolog to Java interface,  Prev: Top,  Up: Top

Introduction
************

The increasing diversity of platforms used today and the diffusion of
Internet and the World Wide Web makes compatibility between platforms a
key factor to run the software everywhere with no change.  Java seems to
achieve this goal, using a bytecode intermediate language and a large
library of platform-dependent and independent classes which fully
implements many.  On the other hand, Prolog provides a powerful
implementation of logic programming paradigm.  This document includes
the reference manual of the Prolog/Java bidirectional interface
implemented in Ciao.  In addition, it has been developed an application
of this interface that makes use of an object oriented extension of
Prolog to encapsulate the java classes, O'Ciao, both the ones defined in
the JDK as well as new classes developed in Java.  These classes can be
used in the object oriented prolog extension of Ciao just like native
O'Ciao classes.

The proposed interaction between both languages is realized as an
interface between two processes, a Java process and a Prolog process,
running separately.  This approach allows the programmer to use of both
Java and Prolog, without the compiler-dependent glue code used in other
linkage-oriented approaches, and preserves the philosophy of Java as an
independent language.  The interface communication is based on a clean
socket-based protocol, providing hardware and software independence.
This allows also both processes to be run in different machines
connected by a TCP/IP transport protocol, based on a client/server model
that can evolve to a more cooperative model.

The present manual includes reference information about the Prolog side
of the bidirectional Java/Prolog interface.  The Java side of this
interface is explained in the HTML pages generated by Javadoc.

Distributed Programming Model
=============================

The differences between Prolog and Java impose the division of the
interface in two main parts: a prolog-to-java and a java-to-prolog
interfaces.  Most of the applications that will use this interface will
consider that will be a "client' side that request actions and queries
to a "server' side, which accomplish the actions and answer the queries.
In a first approach, any of the both one-way interfaces implement a pure
client/server model: the server waits for a query, performs the received
query and sleeps until the next query comes; the client starts the
server, carries out the initial part of the job initiating all the
conversations with the server, and requests the server to do some things
sometimes.

This model cannot handle correctly the tasks regarding an event oriented
programming environment like java.  A usual application of the
prolog-to-java interface could be a graphical user interface server made
in java, and a prolog client on the other side.  A pure client/server
model based on requests and results is not powerful enough to leave the
prolog side managing all the application specific work of this example:
some java specific stuff is needed to catch and manipulate properly the
events thrown by the graphical user interface.  This problem can be
solved in a distributed context, on which both languages are clients and
servers simultaneously, and can perform requests and do actions at a
time.  Using this model, the prolog side can add a prolog goal as
listener of a specific event, and the java side launches that goal when
the event raises.

In any case, the client/server approach simplifies the design of the
interface, so both interfaces have been designed in such way, but
keeping in mind that the goal is to reach a distributed environment, so
each side do the things it is best designed for.


File: ciao_java.info.tmp,  Node: Prolog to Java interface,  Next: Java to Prolog interface,  Prev: Introduction,  Up: Top

Prolog to Java interface
************************

Author(s): Jesu's Correas.

This module defines the Ciao Prolog to Java interface.  This interface
allows a Prolog program to start a Java process, create Java objects,
invoke methods, set/get attributes (fields), and handle Java events.

This interface only works with JDK version 1.2 or higher.

Although the Java side interface is explained in Javadoc format (it is
available at 'library/javall/javadoc/' in your Ciao installation), the
general interface structure is detailed here.

Prolog to Java Interface Structure
==================================

This interface is made up of two parts: a Prolog part and a Java part,
running in separate processes.  The Prolog part receives requests from a
Prolog program and sends them to the Java part through a socket.  The
Java part receives requests from the socket and performs the actions
included in the requests.

If an event is thrown in the Java side, an asynchronous message must be
sent away to the Prolog side, in order to launch a Prolog goal to handle
the event.  This asynchronous communication is performed using a
separate socket.  The nature of this communication needs the use of
threads both in Java and Prolog: to deal with the 'sequential program
flow,' and other threads for event handling.

In both sides the threads are automatically created by the context of
the objects we use.  The user must be aware that different requests to
the other side of the interface could run concurrently.

Prolog side of the Java interface
---------------------------------

The Prolog side receives the actions to do in the Java side from the
user program, and sends them to the Java process through the socket
connection.  When the action is done in the Java side, the result is
returned to the user Prolog program, or the action fails if there is any
problem in the Java side.

Prolog data representation of Java elements is very simple in this
interface.  Java primitive types such as integers and characters are
translated into the Prolog corresponding terms, and even some Java
objects are translated in the same way (e.  g.  Java strings).  Java
objects are represented in Prolog as compound terms with a reference id
to identify the corresponding Java object.  Data conversion is made
automatically when the interface is used, so the Prolog user programs do
not have to deal with the complexity of these tasks.

Java side
---------

The Java side of this layer is more complex than the Prolog side.  The
tasks this part has to deal with are the following:

   * Wait for requests from the Prolog side.

   * Translate the Prolog terms received in the Prolog 'serialized' form
     to a more useful Java representation (see the Java interface
     documentation available at 'library/javall/javadoc/' in your Ciao
     installation for details regarding Java representation of Prolog
     terms).

   * Interpret the requests received from the Prolog side, and execute
     them.

   * Handle the set of objects created by or derived from the requests
     received from the prolog side.

   * Handle the events raised in the Java side, and launch the listeners
     added in the prolog side.

   * Handle the exceptions raised in the Java side, and send them to the
     Prolog side.

In the implementation of the Java side, two items must be carefully
designed: the handling of Java objects, and the representation of prolog
data structures.  The last item is specially important because all the
interactions between Prolog and Java are made using Prolog structures,
an easy way to standardize the different data management in both sides.
Even the requests themselves are encapsulated using Prolog structures.
The overload of this encapsulation is not significant in terms of socket
traffic, due to the optimal implementation of the prolog serialized
term.

The java side must handle the objects created from the Prolog side
dinamically, and these objects must be accessed as fast as possible from
the set of objects.  The Java API provides a powerful implementation of
Hash tables that achieves all the requirements of our implementation.

On the other hand, the java representation of prolog terms is made using
the inheritance of java classes.  In the java side there exists a
representation of a generic prolog term, implemented as an abstract
class in java.  Variables, atoms, compound terms, lists, and numeric
terms are classes in the java side which inherit from the term class.
Java objects can be seen also under the prolog representation as
compound terms, where the single argument corresponds to the Hash key of
the actual java object in the Hash table referred to before.  This
behaviour makes the handling of mixed java and prolog elements easy.
Prolog goals are represented in the java side as objects which contain a
prolog compound term with the term representing the goal.  This case
will be seen more in depth in next chapter, where the java to prolog
interface is explained.

Java event handling from Prolog
===============================

Java event handling is based on a delegation model since version 1.1.x.
This approach to event handling is very powerful and elegant, but a user
program cannot handle all the events that can arise on a given object:
for each kind of event, a listener must be implemented and added
specifically.  However, the Java 2 API includes a special listener
('AWTEventListener') that can manage the internal java event queue.

The prolog to java interface has been designed to emulate the java event
handler, and is also based on event objects and listeners.  The prolog
to java interface implements its own event manager, to handle those
events that have prolog listeners associated to the object that raises
the event.  From the prolog side can be added listeners to objects for
specific events.  The java side includes a list of goals to launch from
the object and event type.

Due to the events nature, the event handler must work in a separate
thread to manage the events asynchronously.  The java side has its own
mechanisms to work this way.  The prolog side must be implemented
specially for event handling using threads.  The communication between
java and prolog is also asynchronous, and an additional socket stream is
used to avoid interferences with the main socket stream.  The event
stream will work in this implementation only in one way: from java to
prolog.  If an event handler needs to send back requests to java, it
will use the main socket stream, just like the requests sent directly
from a prolog program.

The internal process of register a Prolog event handler to a Java event
is shown in the next figure:

[ciao_java.cachedoc/texinfo/ip2jbn-events-pl-reg_autofig]
When an event raises, the Prolog to Java interface has to send to the
Prolog user program the goal to evaluate.  Graphically, the complete
process takes the tasks involved in the following figure:

[ciao_java.cachedoc/texinfo/ip2jbn-events-pl-fire_autofig]
Java exception handling from Prolog
===================================

Java exception handling is very similar to the peer prolog handling: it
includes some specific statements to trap exceptions from user code.  In
the java side, the exceptions can be originated from an incorrect
request, or can be originated in the code called from the request.  Both
exception types will be sent to prolog using the main socket stream,
allowing the prolog program manage the exception.  However, the first
kind of exceptions are prefixed, so the user program can distinguish
them from the second type of exceptions.

In order to handle exceptions properly using the prolog to java and java
to prolog interfaces simultaneously, in both sides of the interface
those exceptions coming from their own side will be filtered: this
avoids an endless loop of exceptions bouncing from one side to another.

Usage and interface
===================

   * Library usage:

     ':- use_module(library(javall/javart)).'
   * Exports:

        - Predicates:

          'java_start/0', 'java_start/1', 'java_start/2', 'java_stop/0',
          'java_connect/2', 'java_disconnect/0', 'java_use_module/1',
          'java_create_object/2', 'java_delete_object/1',
          'java_invoke_method/2', 'java_get_value/2',
          'java_set_value/2', 'java_add_listener/3',
          'java_remove_listener/3'.
        - Regular Types:

          'machine_name/1', 'java_constructor/1', 'java_object/1',
          'java_event/1', 'prolog_goal/1', 'java_field/1',
          'java_method/1'.

Documentation on exports
========================

 -- PREDICATE: java_start/0:

     Usage:

     Starts the Java server on the local machine, connects to it, and
     starts the event handling thread.

 -- PREDICATE: java_start/1:

     Usage: 'java_start(Classpath)'

     Starts the Java server on the local machine, connects to it, and
     starts the event handling thread.  The Java server is started using
     the classpath received as argument.
        - Call and exit should be compatible with:

          'Classpath' is a string (a list of character codes).
          ('basic_props:string/1')
        - The following properties should hold at call time:

          'Classpath' is currently a term which is not a free variable.
          ('term_typing:nonvar/1')

 -- PREDICATE: java_start/2:

     Usage: 'java_start(Machine_name,Classpath)'

     Starts the Java server in 'machine_name' (using rsh!), connects to
     it, and starts the event handling thread.  The Java server is
     started using the 'Classpath' received as argument.
        - Call and exit should be compatible with:

          'Machine_name' is the network name of a machine.
          ('javart:machine_name/1')

          'Classpath' is a string (a list of character codes).
          ('basic_props:string/1')
        - The following properties should hold at call time:

          'Machine_name' is currently a term which is not a free
          variable.  ('term_typing:nonvar/1')

          'Classpath' is currently a term which is not a free variable.
          ('term_typing:nonvar/1')

 -- PREDICATE: java_stop/0:

     Usage:

     Stops the interface terminating the threads that handle the socket
     connection, and finishing the Java interface server if it was
     started using java_start/n.

 -- PREDICATE: java_connect/2:

     Usage: 'java_connect(Machine_name,Port_number)'

     Connects to an existing Java interface server running in
     'Machine_name' and listening at port 'port_number'.  To connect to
     a Java server located in the local machine, use 'localhost' as
     machine_name.
        - Call and exit should be compatible with:

          'Machine_name' is the network name of a machine.
          ('javart:machine_name/1')

          'Port_number' is an integer.  ('basic_props:int/1')
        - The following properties should hold at call time:

          'Machine_name' is currently a term which is not a free
          variable.  ('term_typing:nonvar/1')

          'Port_number' is currently a term which is not a free
          variable.  ('term_typing:nonvar/1')

 -- PREDICATE: java_disconnect/0:

     Usage:

     Closes the connection with the java process, terminating the
     threads that handle the connection to Java.  This predicate does
     not terminate the Java process (this is the disconnection procedure
     for Java servers not started from Prolog).  This predicate should
     be used when the communication is established with java_connect/2.

 -- REGTYPE: machine_name/1:

     Usage: 'machine_name(X)'

     'X' is the network name of a machine.

 -- REGTYPE: java_constructor/1:

     Usage: 'java_constructor(X)'

     'X' is a java constructor (structure with functor as constructor
     full name, and arguments as constructor arguments).

 -- REGTYPE: java_object/1:

     Usage: 'java_object(X)'

     'X' is a java object (a structure with functor '$java_object', and
     argument an integer given by the java side).

 -- REGTYPE: java_event/1:

     Usage: 'java_event(X)'

     'X' is a java event represented as an atom with the full event
     constructor name (e.g., 'java.awt.event.ActionListener').

 -- REGTYPE: prolog_goal/1:

     Usage: 'prolog_goal(X)'

     'X' is a prolog predicate.  Prolog term that represents the goal
     that must be invoked when the event raises on the object.  The
     predicate arguments can be java objects, or even the result of java
     methods.  These java objects will be evaluated when the event
     raises (instead of when the listener is added).  The arguments that
     represent java objects must be instantiated to already created
     objects.  The variables will be kept uninstantiated when the event
     raises and the predicate is called.

 -- REGTYPE: java_field/1:

     Usage: 'java_field(X)'

     'X' is a java field (structure on which the functor name is the
     field name, and the single argument is the field value).

 -- PREDICATE: java_use_module/1:

     Usage: 'java_use_module(Module)'

     Loads a module and makes it available from Java.
        - Call and exit should be compatible with:

          'Module' is any term.  ('basic_props:term/1')
        - The following properties should hold at call time:

          'Module' is currently a term which is not a free variable.
          ('term_typing:nonvar/1')

 -- PREDICATE: java_create_object/2:

     Usage:

     New java object creation.  The constructor must be a compound term
     as defined by its type, with the full class name as functor (e.g.,
     'java.lang.String'), and the parameters passed to the constructor
     as arguments of the structure.
        - Call and exit should be compatible with:

          'Arg1' is a java constructor (structure with functor as
          constructor full name, and arguments as constructor
          arguments).  ('javart:java_constructor/1')

          'Arg2' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')
        - The following properties should hold at call time:

          'Arg1' is a java constructor (structure with functor as
          constructor full name, and arguments as constructor
          arguments).  ('javart:java_constructor/1')

          'Arg2' is a free variable.  ('term_typing:var/1')
        - The following properties should hold upon exit:

          'Arg2' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

 -- PREDICATE: java_delete_object/1:

     Usage:

     Java object deletion.  It removes the object given as argument from
     the Java object table.
        - Call and exit should be compatible with:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')
        - The following properties should hold at call time:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

 -- PREDICATE: java_invoke_method/2:

     Usage:

     Invokes a java method on an object.  Given a Java object reference,
     invokes the method represented with the second argument.
        - Call and exit should be compatible with:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

          'Arg2' is a java method (structure with functor as method
          name, and arguments as method ones, plus a result argument.
          This result argument is unified with the atom 'Yes' if the
          java method returns void).  ('javart:java_method/1')
        - The following properties should hold at call time:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

          'Arg2' is a java method (structure with functor as method
          name, and arguments as method ones, plus a result argument.
          This result argument is unified with the atom 'Yes' if the
          java method returns void).  ('javart:java_method/1')

 -- REGTYPE: java_method/1:

     Usage: 'java_method(X)'

     'X' is a java method (structure with functor as method name, and
     arguments as method ones, plus a result argument.  This result
     argument is unified with the atom 'Yes' if the java method returns
     void).

 -- PREDICATE: java_get_value/2:

     Usage:

     Gets the value of a field.  Given a Java object as first argument,
     it instantiates the variable given as second argument.  This field
     must be uninstantiated in the java_field functor, or this predicate
     will fail.
        - Call and exit should be compatible with:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

          'Arg2' is a java field (structure on which the functor name is
          the field name, and the single argument is the field value).
          ('javart:java_field/1')
        - The following properties should hold at call time:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

          'Arg2' is a java field (structure on which the functor name is
          the field name, and the single argument is the field value).
          ('javart:java_field/1')

 -- PREDICATE: java_set_value/2:

     Usage:

     Sets the value of a Java object field.  Given a Java object
     reference, it assigns the value included in the java_field compound
     term.  The field value in the java_field structure must be
     instantiated.
        - Call and exit should be compatible with:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

          'Arg2' is a java field (structure on which the functor name is
          the field name, and the single argument is the field value).
          ('javart:java_field/1')
        - The following properties should hold at call time:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

          'Arg2' is a java field (structure on which the functor name is
          the field name, and the single argument is the field value).
          ('javart:java_field/1')

 -- PREDICATE: java_add_listener/3:

     Usage:

     Adds a listener to an event on an object.  Given a Java object
     reference, it registers the goal received as third argument to be
     launched when the Java event raises.
        - Call and exit should be compatible with:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

          'Arg2' is a java event represented as an atom with the full
          event constructor name (e.g.,
          'java.awt.event.ActionListener').  ('javart:java_event/1')

          'Arg3' is a prolog predicate.  Prolog term that represents the
          goal that must be invoked when the event raises on the object.
          The predicate arguments can be java objects, or even the
          result of java methods.  These java objects will be evaluated
          when the event raises (instead of when the listener is added).
          The arguments that represent java objects must be instantiated
          to already created objects.  The variables will be kept
          uninstantiated when the event raises and the predicate is
          called.  ('javart:prolog_goal/1')
        - The following properties should hold at call time:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

          'Arg2' is a java event represented as an atom with the full
          event constructor name (e.g.,
          'java.awt.event.ActionListener').  ('javart:java_event/1')

          'Arg3' is a prolog predicate.  Prolog term that represents the
          goal that must be invoked when the event raises on the object.
          The predicate arguments can be java objects, or even the
          result of java methods.  These java objects will be evaluated
          when the event raises (instead of when the listener is added).
          The arguments that represent java objects must be instantiated
          to already created objects.  The variables will be kept
          uninstantiated when the event raises and the predicate is
          called.  ('javart:prolog_goal/1')

     Meta-predicate with arguments: 'java_add_listener(?,?,goal)'.


 -- PREDICATE: java_remove_listener/3:

     Usage:

     It removes a listener from an object event queue.  Given a Java
     object reference, goal registered for the given event is removed.
        - Call and exit should be compatible with:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

          'Arg2' is a java event represented as an atom with the full
          event constructor name (e.g.,
          'java.awt.event.ActionListener').  ('javart:java_event/1')

          'Arg3' is a prolog predicate.  Prolog term that represents the
          goal that must be invoked when the event raises on the object.
          The predicate arguments can be java objects, or even the
          result of java methods.  These java objects will be evaluated
          when the event raises (instead of when the listener is added).
          The arguments that represent java objects must be instantiated
          to already created objects.  The variables will be kept
          uninstantiated when the event raises and the predicate is
          called.  ('javart:prolog_goal/1')
        - The following properties should hold at call time:

          'Arg1' is a java object (a structure with functor
          '$java_object', and argument an integer given by the java
          side).  ('javart:java_object/1')

          'Arg2' is a java event represented as an atom with the full
          event constructor name (e.g.,
          'java.awt.event.ActionListener').  ('javart:java_event/1')

          'Arg3' is a prolog predicate.  Prolog term that represents the
          goal that must be invoked when the event raises on the object.
          The predicate arguments can be java objects, or even the
          result of java methods.  These java objects will be evaluated
          when the event raises (instead of when the listener is added).
          The arguments that represent java objects must be instantiated
          to already created objects.  The variables will be kept
          uninstantiated when the event raises and the predicate is
          called.  ('javart:prolog_goal/1')

Documentation on imports
========================

This module has the following direct dependencies:
   - Application modules:

     'javasock'.
   - System library modules:

     'datafacts_rt', 'concurrency', 'iso_char', 'lists', 'read',
     'write', 'process', 'system'.
   - Packages:

     'prelude', 'initial', 'condcomp', 'assertions',
     'assertions/assertions_basic', 'regtypes', 'isomodes', 'datafacts'.


File: ciao_java.info.tmp,  Node: Java to Prolog interface,  Next: Low-level Prolog to Java socket connection,  Prev: Prolog to Java interface,  Up: Top

Java to Prolog interface
************************

Author(s): Jesu's Correas.

This module defines the Prolog side of the Java to Prolog interface.
This side of the interface only has one public predicate: a server that
listens at the socket connection with Java, and executes the commands
received from the Java side.

In order to evaluate the goals received from the Java side, this module
can work in two ways: executing them in the same engine, or starting a
thread for each goal.  The easiest way is to launch them in the same
engine, but the goals must be evaluated sequentially: once a goal
provides the first solution, all the subsequent goals must be finished
before this goal can backtrack to provide another solution.  The Prolog
side of this interface works as a top-level, and the goals partially
evaluated are not independent.

The solution of this goal dependence is to evaluate the goals in a
different prolog engine.  Although Ciao includes a mechanism to evaluate
goals in different engines, the approach used in this interface is to
launch each goal in a different thread.

The decision of what kind of goal evaluation is selected is done by the
Java side.  Each evaluation type has its own command terms, so the Java
side can choose the type it needs.

A Prolog server starts by calling the 'prolog_server/0' predicate, or by
calling 'prolog_server/1' predicate and providing the port number as
argument.  The user predicates and libraries to be called from Java must
be included in the executable file, or be accesible using the built-in
predicates dealing with code loading.

Usage and interface
===================

   * Library usage:

     ':- use_module(library(javall/jtopl)).'
   * Exports:

        - Predicates:

          'prolog_server/0', 'prolog_server/1', 'prolog_server/2',
          'shell_s/0', 'query_solutions/2', 'query_requests/2',
          'running_queries/2'.

Documentation on exports
========================

 -- PREDICATE: prolog_server/0:

     Usage:

     Prolog server entry point.  Reads from the standard input the node
     name and port number where the java client resides, and starts the
     prolog server listening at the jp socket.  This predicate acts as a
     server: it includes an endless read-process loop until the
     'prolog_halt' command is received.

     However, from the low-level communication point of view, this
     Prolog server actually works as a client of the Java side.  This
     means that Java side waits at the given port to a Prolog server
     trying to create a socket; Prolog side connects to that port, and
     then waits for Java requests (acting as a 'logical' server).  To
     use this Prolog server as a real server waiting for connections at
     a given port, use 'prolog_server/1'.


 -- PREDICATE: prolog_server/1:

     Usage:

     Waits for incoming Java connections to act as a Prolog goal server
     for Java requests.This is the only 'prolog_server/*' predicate that
     works as a true server: given a port number, waits for a connection
     from Java and then serves Java requests.  When a termination
     request is received, finishes the connection to Java and waits next
     Java connection request.  This behaviour is different with respect
     to previous versions of this library.  To work as before, use
     'prolog_server/2'.

     Although it currently does not support simultaneous Java
     connections, some work is being done in that direction.
        - Call and exit should be compatible with:

          'Arg1' is an atom.  ('basic_props:atm/1')

 -- PREDICATE: prolog_server/2:

     Usage:

     Prolog server entry point.  Given a network 'node' and a 'port'
     number, starts the prolog server trying to connect to Java side at
     that 'node:port' address, and then waits for Java requests.  This
     predicate acts as a server: it includes an endless read-process
     loop until the 'prolog_halt' command is received.

     However, from the low-level communication point of view, this
     Prolog server actually works as a client of the Java side.  This
     means that Java side waits at the given port to a Prolog server
     trying to create a socket; Prolog side connects to that port, and
     then waits for Java requests (acting as a 'logical' server).  To
     use this Prolog server as a real server waiting for connections at
     a given port, use 'prolog_server/1'.
        - Call and exit should be compatible with:

          'Arg1' is an atom.  ('basic_props:atm/1')

          'Arg2' is an atom.  ('basic_props:atm/1')

 -- PREDICATE: shell_s/0:

     Usage:

     Command execution loop.  This predicate is called when the
     connection to Java is established, and performs an endless loop
     processing the commands received.  This predicate is only intended
     to be used by the Prolog to Java interface and it should not be
     used by a user program.

 -- PREDICATE: query_solutions/2:
     No further documentation available for this predicate.  The
     predicate is of type concurrent.


 -- PREDICATE: query_requests/2:
     No further documentation available for this predicate.  The
     predicate is of type concurrent.


 -- PREDICATE: running_queries/2:
     No further documentation available for this predicate.  The
     predicate is of type concurrent.


Documentation on imports
========================

This module has the following direct dependencies:
   - Application modules:

     'javasock'.
   - System library modules:

     'datafacts_rt', 'concurrency', 'system', 'read', 'compiler',
     'read_from_string'.
   - Packages:

     'prelude', 'initial', 'condcomp', 'assertions',
     'assertions/assertions_basic', 'regtypes', 'isomodes', 'datafacts'.


File: ciao_java.info.tmp,  Node: Low-level Prolog to Java socket connection,  Next: References,  Prev: Java to Prolog interface,  Up: Top

Low-level Prolog to Java socket connection
******************************************

Author(s): Jesu's Correas.

This module defines a low-level socket interface, to be used by javart
and jtopl.  Includes all the code related directly to the handling of
sockets.  This library should not be used by any user program, because
is a very low-level connection to Java.  Use 'javart' (Prolog to Java
interface) or 'jtopl' (Java to Prolog interface) libraries instead.

Usage and interface
===================

   * Library usage:

     ':- use_module(library(javall/javasock)).'
   * Exports:

        - Predicates:

          'bind_socket_interface/1', 'start_socket_interface/2',
          'stop_socket_interface/0', 'join_socket_interface/0',
          'java_query/2', 'java_response/2', 'prolog_query/2',
          'prolog_response/2', 'is_connected_to_java/0', 'java_debug/1',
          'java_debug_redo/1', 'start_threads/0'.

Documentation on exports
========================

 -- PREDICATE: bind_socket_interface/1:

     Usage: 'bind_socket_interface(Port)'

     Given an port number, waits for a connection request from the Java
     side, creates the sockets to connect to the java process, and
     starts the threads needed to handle the connection.
        - Call and exit should be compatible with:

          'Port' is an integer.  ('basic_props:int/1')
        - The following properties should hold at call time:

          'Port' is currently a term which is not a free variable.
          ('term_typing:nonvar/1')

 -- PREDICATE: start_socket_interface/2:

     Usage: 'start_socket_interface(Address,Stream)'

     Given an address in format 'node:port', creates the sockets to
     connect to the java process, and starts the threads needed to
     handle the connection.
        - Call and exit should be compatible with:

          'Address' is any term.  ('basic_props:term/1')

          'Stream' is an open stream.  ('stream_basic:stream/1')
        - The following properties should hold at call time:

          'Address' is currently a term which is not a free variable.
          ('term_typing:nonvar/1')

          'Stream' is currently a term which is not a free variable.
          ('term_typing:nonvar/1')

 -- PREDICATE: stop_socket_interface/0:

     Usage:

     Closes the sockets to disconnect from the java process, and waits
     until the threads that handle the connection terminate.

 -- PREDICATE: join_socket_interface/0:

     Usage:

     Waits until the threads that handle the connection terminate.

 -- PREDICATE: java_query/2:

     Usage: 'java_query(ThreadId,Query)'

     Data predicate containing the queries to be sent to Java.  First
     argument is the Prolog thread Id, and second argument is the query
     to send to Java.
        - Call and exit should be compatible with:

          'ThreadId' is an atom.  ('basic_props:atm/1')

          'Query' is any term.  ('basic_props:term/1')

     The predicate is of type concurrent.


 -- PREDICATE: java_response/2:

     Usage: 'java_response(Id,Response)'

     Data predicate that stores the responses to requests received from
     Java.  First argument corresponds to the Prolog thread Id; second
     argument corresponds to the response itself.
        - Call and exit should be compatible with:

          'Id' is an atom.  ('basic_props:atm/1')

          'Response' is any term.  ('basic_props:term/1')

     The predicate is of type concurrent.


 -- PREDICATE: prolog_query/2:

     Usage: 'prolog_query(Id,Query)'

     Data predicate that keeps a queue of the queries requested to
     Prolog side from Java side.
        - Call and exit should be compatible with:

          'Id' is an integer.  ('basic_props:int/1')

          'Query' is any term.  ('basic_props:term/1')

     The predicate is of type concurrent.


 -- PREDICATE: prolog_response/2:

     Usage: 'prolog_response(Id,Response)'

     Data predicate that keeps a queue of the responses to queries
     requested to Prolog side from Java side.
        - Call and exit should be compatible with:

          'Id' is an integer.  ('basic_props:int/1')

          'Response' is any term.  ('basic_props:term/1')

     The predicate is of type concurrent.


 -- PREDICATE: is_connected_to_java/0:

     Usage:

     Checks if the connection to Java is established.

 -- PREDICATE: java_debug/1:
     No further documentation available for this predicate.

 -- PREDICATE: java_debug_redo/1:
     No further documentation available for this predicate.

 -- PREDICATE: start_threads/0:

     Usage:

     Starts the threads that will handle the connection to Java.  This
     predicate is declared public for internal purposes, and it is not
     intended to be used by a user program.

Documentation on imports
========================

This module has the following direct dependencies:
   - Application modules:

     'jtopl'.
   - System library modules:

     'datafacts_rt', 'sockets', 'format', 'concurrency', 'sockets_io'.
   - Packages:

     'prelude', 'initial', 'condcomp', 'assertions',
     'assertions/assertions_basic', 'regtypes', 'isomodes', 'datafacts'.


File: ciao_java.info.tmp,  Node: References,  Next: Library/Module Index,  Prev: Low-level Prolog to Java socket connection,  Up: Top

References
**********

(this section is empty)


File: ciao_java.info.tmp,  Node: Library/Module Index,  Next: Predicate Index,  Prev: References,  Up: Top

Library/Module Index
********************

 [index ]
* Menu:

* javart:                                Prolog to Java interface.
                                                                (line 6)
* javasock:                              Low-level Prolog to Java socket connection.
                                                                (line 6)
* jtopl:                                 Java to Prolog interface.
                                                                (line 6)


File: ciao_java.info.tmp,  Node: Predicate Index,  Next: Property Index,  Prev: Library/Module Index,  Up: Top

Predicate Index
***************

 [index ]
* Menu:

* bind_socket_interface/1:               Low-level Prolog to Java socket connection.
                                                              (line  33)
* is_connected_to_java/0:                Low-level Prolog to Java socket connection.
                                                              (line 143)
* java_add_listener/3:                   Prolog to Java interface.
                                                              (line 473)
* java_connect/2:                        Prolog to Java interface.
                                                              (line 244)
* java_create_object/2:                  Prolog to Java interface.
                                                              (line 336)
* java_debug/1:                          Low-level Prolog to Java socket connection.
                                                              (line 149)
* java_debug_redo/1:                     Low-level Prolog to Java socket connection.
                                                              (line 152)
* java_delete_object/1:                  Prolog to Java interface.
                                                              (line 366)
* java_disconnect/0:                     Prolog to Java interface.
                                                              (line 266)
* java_get_value/2:                      Prolog to Java interface.
                                                              (line 419)
* java_invoke_method/2:                  Prolog to Java interface.
                                                              (line 383)
* java_query/2:                          Low-level Prolog to Java socket connection.
                                                              (line  81)
* java_remove_listener/3:                Prolog to Java interface.
                                                              (line 522)
* java_response/2:                       Low-level Prolog to Java socket connection.
                                                              (line  97)
* java_set_value/2:                      Prolog to Java interface.
                                                              (line 446)
* java_start/0:                          Prolog to Java interface.
                                                              (line 191)
* java_start/1:                          Prolog to Java interface.
                                                              (line 198)
* java_start/2:                          Prolog to Java interface.
                                                              (line 214)
* java_stop/0:                           Prolog to Java interface.
                                                              (line 236)
* java_use_module/1:                     Prolog to Java interface.
                                                              (line 323)
* join_socket_interface/0:               Low-level Prolog to Java socket connection.
                                                              (line  75)
* prolog_query/2:                        Low-level Prolog to Java socket connection.
                                                              (line 113)
* prolog_response/2:                     Low-level Prolog to Java socket connection.
                                                              (line 128)
* prolog_server/0:                       Java to Prolog interface.
                                                              (line  54)
* prolog_server/1:                       Java to Prolog interface.
                                                              (line  73)
* prolog_server/2:                       Java to Prolog interface.
                                                              (line  92)
* query_requests/2:                      Java to Prolog interface.
                                                              (line 130)
* query_solutions/2:                     Java to Prolog interface.
                                                              (line 125)
* running_queries/2:                     Java to Prolog interface.
                                                              (line 135)
* shell_s/0:                             Java to Prolog interface.
                                                              (line 115)
* start_socket_interface/2:              Low-level Prolog to Java socket connection.
                                                              (line  48)
* start_threads/0:                       Low-level Prolog to Java socket connection.
                                                              (line 155)
* stop_socket_interface/0:               Low-level Prolog to Java socket connection.
                                                              (line  68)


File: ciao_java.info.tmp,  Node: Property Index,  Next: Regular Type Index,  Prev: Predicate Index,  Up: Top

Property Index
**************


File: ciao_java.info.tmp,  Node: Regular Type Index,  Next: Declaration Index,  Prev: Property Index,  Up: Top

Regular Type Index
******************

 [index ]
* Menu:

* java_constructor/1:                    Prolog to Java interface.
                                                              (line 282)
* java_event/1:                          Prolog to Java interface.
                                                              (line 296)
* java_field/1:                          Prolog to Java interface.
                                                              (line 316)
* java_method/1:                         Prolog to Java interface.
                                                              (line 410)
* java_object/1:                         Prolog to Java interface.
                                                              (line 289)
* machine_name/1:                        Prolog to Java interface.
                                                              (line 276)
* prolog_goal/1:                         Prolog to Java interface.
                                                              (line 303)


File: ciao_java.info.tmp,  Node: Declaration Index,  Next: Concept Index,  Prev: Regular Type Index,  Up: Top

Declaration Index
*****************


File: ciao_java.info.tmp,  Node: Concept Index,  Next: Author Index,  Prev: Declaration Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* Distributed Programming Model:         Introduction.        (line  39)
* Java event handling from Prolog:       Prolog to Java interface.
                                                              (line 114)
* Java exception handling from Prolog:   Prolog to Java interface.
                                                              (line 152)
* Java to Prolog interface:              Java to Prolog interface.
                                                              (line   8)
* Platform independence:                 Introduction.        (line   6)
* Prolog server:                         Java to Prolog interface.
                                                              (line  72)
* Prolog server <1>:                     Java to Prolog interface.
                                                              (line  87)
* Prolog server <2>:                     Java to Prolog interface.
                                                              (line 108)
* Prolog to Java Interface Structure:    Prolog to Java interface.
                                                              (line  21)
* Prolog to Java Interface Structure. Java side: Prolog to Java interface.
                                                              (line  59)
* Prolog to Java Interface Structure. Prolog side: Prolog to Java interface.
                                                              (line  41)
* Socket implementation:                 Low-level Prolog to Java socket connection.
                                                              (line   8)


File: ciao_java.info.tmp,  Node: Author Index,  Next: Global Index,  Prev: Concept Index,  Up: Top

Author Index
************

 [index ]
* Menu:

* Jesus Correas:                         Prolog to Java interface.
                                                                (line 6)
* Jesus Correas <1>:                     Java to Prolog interface.
                                                                (line 6)
* Jesus Correas <2>:                     Low-level Prolog to Java socket connection.
                                                                (line 6)


File: ciao_java.info.tmp,  Node: Global Index,  Prev: Author Index,  Up: Top

Global Index
************

This is a global index containing pointers to places where concepts,
predicates, modes, properties, types, applications, authors, etc., are
referred to in the text of the document.

 [index ]
* Menu:

* assertions:                            Prolog to Java interface.
                                                              (line 580)
* assertions <1>:                        Java to Prolog interface.
                                                              (line 153)
* assertions <2>:                        Low-level Prolog to Java socket connection.
                                                              (line 175)
* assertions/assertions_basic:           Prolog to Java interface.
                                                              (line 580)
* assertions/assertions_basic <1>:       Java to Prolog interface.
                                                              (line 153)
* assertions/assertions_basic <2>:       Low-level Prolog to Java socket connection.
                                                              (line 175)
* bind_socket_interface/1:               Low-level Prolog to Java socket connection.
                                                              (line  24)
* bind_socket_interface/1 <1>:           Low-level Prolog to Java socket connection.
                                                              (line  33)
* compiler:                              Java to Prolog interface.
                                                              (line 149)
* concurrency:                           Prolog to Java interface.
                                                              (line 576)
* concurrency <1>:                       Java to Prolog interface.
                                                              (line 149)
* concurrency <2>:                       Low-level Prolog to Java socket connection.
                                                              (line 172)
* condcomp:                              Prolog to Java interface.
                                                              (line 580)
* condcomp <1>:                          Java to Prolog interface.
                                                              (line 153)
* condcomp <2>:                          Low-level Prolog to Java socket connection.
                                                              (line 175)
* datafacts:                             Prolog to Java interface.
                                                              (line 581)
* datafacts <1>:                         Java to Prolog interface.
                                                              (line 154)
* datafacts <2>:                         Low-level Prolog to Java socket connection.
                                                              (line 176)
* datafacts_rt:                          Prolog to Java interface.
                                                              (line 576)
* datafacts_rt <1>:                      Java to Prolog interface.
                                                              (line 149)
* datafacts_rt <2>:                      Low-level Prolog to Java socket connection.
                                                              (line 172)
* Distributed Programming Model:         Introduction.        (line  39)
* format:                                Low-level Prolog to Java socket connection.
                                                              (line 172)
* initial:                               Prolog to Java interface.
                                                              (line 580)
* initial <1>:                           Java to Prolog interface.
                                                              (line 153)
* initial <2>:                           Low-level Prolog to Java socket connection.
                                                              (line 175)
* isomodes:                              Prolog to Java interface.
                                                              (line 581)
* isomodes <1>:                          Java to Prolog interface.
                                                              (line 154)
* isomodes <2>:                          Low-level Prolog to Java socket connection.
                                                              (line 176)
* iso_char:                              Prolog to Java interface.
                                                              (line 576)
* is_connected_to_java/0:                Low-level Prolog to Java socket connection.
                                                              (line  27)
* is_connected_to_java/0 <1>:            Low-level Prolog to Java socket connection.
                                                              (line 143)
* Java event handling from Prolog:       Prolog to Java interface.
                                                              (line 114)
* Java exception handling from Prolog:   Prolog to Java interface.
                                                              (line 152)
* Java to Prolog interface:              Java to Prolog interface.
                                                              (line   8)
* javart:                                Prolog to Java interface.
                                                              (line   6)
* javart <1>:                            Low-level Prolog to Java socket connection.
                                                              (line  11)
* javasock:                              Prolog to Java interface.
                                                              (line 573)
* javasock <1>:                          Java to Prolog interface.
                                                              (line 146)
* javasock <2>:                          Low-level Prolog to Java socket connection.
                                                              (line   6)
* java_add_listener/3:                   Prolog to Java interface.
                                                              (line 180)
* java_add_listener/3 <1>:               Prolog to Java interface.
                                                              (line 473)
* java_connect/2:                        Prolog to Java interface.
                                                              (line 177)
* java_connect/2 <1>:                    Prolog to Java interface.
                                                              (line 244)
* java_constructor/1:                    Prolog to Java interface.
                                                              (line 184)
* java_constructor/1 <1>:                Prolog to Java interface.
                                                              (line 282)
* java_create_object/2:                  Prolog to Java interface.
                                                              (line 177)
* java_create_object/2 <1>:              Prolog to Java interface.
                                                              (line 336)
* java_debug/1:                          Low-level Prolog to Java socket connection.
                                                              (line  27)
* java_debug/1 <1>:                      Low-level Prolog to Java socket connection.
                                                              (line 149)
* java_debug_redo/1:                     Low-level Prolog to Java socket connection.
                                                              (line  28)
* java_debug_redo/1 <1>:                 Low-level Prolog to Java socket connection.
                                                              (line 152)
* java_delete_object/1:                  Prolog to Java interface.
                                                              (line 178)
* java_delete_object/1 <1>:              Prolog to Java interface.
                                                              (line 366)
* java_disconnect/0:                     Prolog to Java interface.
                                                              (line 177)
* java_disconnect/0 <1>:                 Prolog to Java interface.
                                                              (line 266)
* java_event/1:                          Prolog to Java interface.
                                                              (line 184)
* java_event/1 <1>:                      Prolog to Java interface.
                                                              (line 296)
* java_field/1:                          Prolog to Java interface.
                                                              (line 185)
* java_field/1 <1>:                      Prolog to Java interface.
                                                              (line 316)
* java_get_value/2:                      Prolog to Java interface.
                                                              (line 179)
* java_get_value/2 <1>:                  Prolog to Java interface.
                                                              (line 419)
* java_invoke_method/2:                  Prolog to Java interface.
                                                              (line 178)
* java_invoke_method/2 <1>:              Prolog to Java interface.
                                                              (line 383)
* java_method/1:                         Prolog to Java interface.
                                                              (line 185)
* java_method/1 <1>:                     Prolog to Java interface.
                                                              (line 410)
* java_object/1:                         Prolog to Java interface.
                                                              (line 184)
* java_object/1 <1>:                     Prolog to Java interface.
                                                              (line 289)
* java_query/2:                          Low-level Prolog to Java socket connection.
                                                              (line  25)
* java_query/2 <1>:                      Low-level Prolog to Java socket connection.
                                                              (line  81)
* java_remove_listener/3:                Prolog to Java interface.
                                                              (line 180)
* java_remove_listener/3 <1>:            Prolog to Java interface.
                                                              (line 522)
* java_response/2:                       Low-level Prolog to Java socket connection.
                                                              (line  26)
* java_response/2 <1>:                   Low-level Prolog to Java socket connection.
                                                              (line  97)
* java_set_value/2:                      Prolog to Java interface.
                                                              (line 179)
* java_set_value/2 <1>:                  Prolog to Java interface.
                                                              (line 446)
* java_start/0:                          Prolog to Java interface.
                                                              (line 176)
* java_start/0 <1>:                      Prolog to Java interface.
                                                              (line 191)
* java_start/1:                          Prolog to Java interface.
                                                              (line 176)
* java_start/1 <1>:                      Prolog to Java interface.
                                                              (line 198)
* java_start/2:                          Prolog to Java interface.
                                                              (line 176)
* java_start/2 <1>:                      Prolog to Java interface.
                                                              (line 214)
* java_stop/0:                           Prolog to Java interface.
                                                              (line 176)
* java_stop/0 <1>:                       Prolog to Java interface.
                                                              (line 236)
* java_use_module/1:                     Prolog to Java interface.
                                                              (line 177)
* java_use_module/1 <1>:                 Prolog to Java interface.
                                                              (line 323)
* Jesus Correas:                         Prolog to Java interface.
                                                              (line   6)
* Jesus Correas <1>:                     Java to Prolog interface.
                                                              (line   6)
* Jesus Correas <2>:                     Low-level Prolog to Java socket connection.
                                                              (line   6)
* join_socket_interface/0:               Low-level Prolog to Java socket connection.
                                                              (line  25)
* join_socket_interface/0 <1>:           Low-level Prolog to Java socket connection.
                                                              (line  75)
* jtopl:                                 Java to Prolog interface.
                                                              (line   6)
* jtopl <1>:                             Low-level Prolog to Java socket connection.
                                                              (line  12)
* jtopl <2>:                             Low-level Prolog to Java socket connection.
                                                              (line 169)
* lists:                                 Prolog to Java interface.
                                                              (line 576)
* machine_name/1:                        Prolog to Java interface.
                                                              (line 184)
* machine_name/1 <1>:                    Prolog to Java interface.
                                                              (line 276)
* Platform independence:                 Introduction.        (line   6)
* prelude:                               Prolog to Java interface.
                                                              (line 580)
* prelude <1>:                           Java to Prolog interface.
                                                              (line 153)
* prelude <2>:                           Low-level Prolog to Java socket connection.
                                                              (line 175)
* process:                               Prolog to Java interface.
                                                              (line 577)
* Prolog server:                         Java to Prolog interface.
                                                              (line  72)
* Prolog server <1>:                     Java to Prolog interface.
                                                              (line  87)
* Prolog server <2>:                     Java to Prolog interface.
                                                              (line 108)
* Prolog to Java Interface Structure:    Prolog to Java interface.
                                                              (line  21)
* Prolog to Java Interface Structure. Java side: Prolog to Java interface.
                                                              (line  59)
* Prolog to Java Interface Structure. Prolog side: Prolog to Java interface.
                                                              (line  41)
* prolog_goal/1:                         Prolog to Java interface.
                                                              (line 185)
* prolog_goal/1 <1>:                     Prolog to Java interface.
                                                              (line 303)
* prolog_query/2:                        Low-level Prolog to Java socket connection.
                                                              (line  26)
* prolog_query/2 <1>:                    Low-level Prolog to Java socket connection.
                                                              (line 113)
* prolog_response/2:                     Low-level Prolog to Java socket connection.
                                                              (line  26)
* prolog_response/2 <1>:                 Low-level Prolog to Java socket connection.
                                                              (line 128)
* prolog_server/0:                       Java to Prolog interface.
                                                              (line  47)
* prolog_server/0 <1>:                   Java to Prolog interface.
                                                              (line  54)
* prolog_server/1:                       Java to Prolog interface.
                                                              (line  47)
* prolog_server/1 <1>:                   Java to Prolog interface.
                                                              (line  73)
* prolog_server/2:                       Java to Prolog interface.
                                                              (line  47)
* prolog_server/2 <1>:                   Java to Prolog interface.
                                                              (line  92)
* query_requests/2:                      Java to Prolog interface.
                                                              (line  48)
* query_requests/2 <1>:                  Java to Prolog interface.
                                                              (line 130)
* query_solutions/2:                     Java to Prolog interface.
                                                              (line  48)
* query_solutions/2 <1>:                 Java to Prolog interface.
                                                              (line 125)
* read:                                  Prolog to Java interface.
                                                              (line 576)
* read <1>:                              Java to Prolog interface.
                                                              (line 149)
* read_from_string:                      Java to Prolog interface.
                                                              (line 149)
* regtypes:                              Prolog to Java interface.
                                                              (line 581)
* regtypes <1>:                          Java to Prolog interface.
                                                              (line 154)
* regtypes <2>:                          Low-level Prolog to Java socket connection.
                                                              (line 176)
* running_queries/2:                     Java to Prolog interface.
                                                              (line  48)
* running_queries/2 <1>:                 Java to Prolog interface.
                                                              (line 135)
* shell_s/0:                             Java to Prolog interface.
                                                              (line  47)
* shell_s/0 <1>:                         Java to Prolog interface.
                                                              (line 115)
* Socket implementation:                 Low-level Prolog to Java socket connection.
                                                              (line   8)
* sockets:                               Low-level Prolog to Java socket connection.
                                                              (line 172)
* sockets_io:                            Low-level Prolog to Java socket connection.
                                                              (line 172)
* start_socket_interface/2:              Low-level Prolog to Java socket connection.
                                                              (line  24)
* start_socket_interface/2 <1>:          Low-level Prolog to Java socket connection.
                                                              (line  48)
* start_threads/0:                       Low-level Prolog to Java socket connection.
                                                              (line  28)
* start_threads/0 <1>:                   Low-level Prolog to Java socket connection.
                                                              (line 155)
* stop_socket_interface/0:               Low-level Prolog to Java socket connection.
                                                              (line  24)
* stop_socket_interface/0 <1>:           Low-level Prolog to Java socket connection.
                                                              (line  68)
* system:                                Prolog to Java interface.
                                                              (line 577)
* system <1>:                            Java to Prolog interface.
                                                              (line 149)
* write:                                 Prolog to Java interface.
                                                              (line 576)



Tag Table:
Node: Top3195
Node: Introduction4346
Node: Prolog to Java interface8171
Node: Java to Prolog interface32204
Node: Low-level Prolog to Java socket connection38114
Node: References43413
Node: Library/Module Index43598
Node: Predicate Index44211
Node: Property Index49216
Node: Regular Type Index49359
Node: Declaration Index50514
Node: Concept Index50664
Node: Author Index52404
Node: Global Index52993

End Tag Table
