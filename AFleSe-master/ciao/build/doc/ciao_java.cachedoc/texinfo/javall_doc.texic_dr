section_env([file_top_section,pragmas([]),paper_opts(1,afourpaper),coversec([],[[bf([string_esc("The CIAO System Documentation Series")])],[em([string_esc("Printed on:")]),string_esc(" "),today([])]],[[string_esc("Jes"),''''("u"),string_esc("s Correas")],[string_esc("The Ciao Development Team")]],[[tt([string_esc("clip"),@,string_esc("dia.fi.upm.es")])],[tt([string_esc("http://www.clip.dia.fi.upm.es/")])],[string_esc("Facultad de Inform"),''''("a"),string_esc("tica")],[string_esc("Universidad Polit"),''''("e"),string_esc("cnica de Madrid")]],nop,nop,[string_esc(" Copyright "),copyright([]),string_esc(" "),string_esc("1996-2002 Jes"),''''("u"),string_esc("s Correas Fern"),''''("a"),string_esc("ndez/The CLIP Group."),p([]),[string_esc("This document may be freely read, stored, reproduced, disseminated, translated or quoted by any means and on any medium provided the following conditions are met:"),p([]),env_(enumerate,[string_esc(" "),p([]),item([]),string_esc("Every reader or user of this document acknowledges that is aware that no guarantee is given regarding its contents, on any account, and specifically concerning veracity, accuracy and fitness for any purpose."),p([]),item([]),string_esc("No modification is made other than cosmetic, change of representation format, translation, correction of obvious syntactic errors, or as permitted by the clauses below."),p([]),item([]),string_esc("Comments and other additions may be inserted, provided they clearly appear as such; translations or fragments must clearly refer to an original complete version, preferably one that is easily accessed whenever possible."),p([]),item([]),string_esc("Translations, comments and other additions or modifications must be dated and their author(s) must be identifiable (possibly via an alias)."),p([]),item([]),string_esc("This licence is preserved and applies to the whole document with modifications and additions (except for brief quotes), independently of the representation format."),p([]),item([]),string_esc("Any reference to the ""official version"", ""original version"" or ""how to obtain original versions"" of the document is preserved verbatim. Any copyright notice in the document is preserved verbatim. Also, the title and author(s) of the original document should be clearly mentioned as such."),p([]),item([]),string_esc("In the case of translations, verbatim sentences mentioned in (6.) are preserved in the language of the original document accompanied by verbatim translations to the language of the traslated document. All translations state clearly that the author is not responsible for the translated work. This license is included, at least in the language in which it is referenced in the original version."),p([]),string_esc(" "),item([]),string_esc("Whatever the mode of storage, reproduction or dissemination, anyone able to access a digitized version of this document must be able to make a digitized copy in a format directly usable, and if possible editable, according to accepted, and publicly documented, public standards."),p([]),item([]),string_esc("Redistributing this document to a third party requires simultaneous redistribution of this licence, without modification, and in particular without any further condition or restriction, expressed or implied, related or not to this redistribution. In particular, in case of inclusion in a database or collection, the owner or the manager of the database or the collection renounces any right related to this inclusion and concerning the possible uses of the document after extraction from the database or the collection, whether alone or in relation with other documents."),p([])]),string_esc(" "),p([]),string_esc("Any incompatibility of the above clauses with legal, contractual or judiciary decisions or constraints implies a corresponding limitation of reading, usage, or redistribution rights for this document, verbatim or modified. ")],string_esc(" ")]),level(0)],global_label("Prolog/Java Bidirectional Interface"),[string_esc("Prolog/Java Bidirectional Interface")],[section_env([level(1),summary_section],local_label("Summary"),string_esc("Summary"),[[raw_nl,[[string_esc("This manual includes the complete reference to the low-level Prolog to Java interface. This interface allows a Prolog program to start a Java process and manipulate Java objects."),p([]),string_esc("In this document we present an interface between Ciao Prolog and Java to take advantage of the capabilities of the java programming language, avoiding problems related to compile-time linking, system dependencies, and static references. This interface fully achieves the objectives using a simple but powerful protocol between both languages. The communication is established by means of sockets, allowing the processes to be in separated machines, and thus providing a means for distributed processing."),p([]),string_esc(" ")]],linebreak],nop]),show_toc(toc_view(no)),section_env([level(1),subfile(intro)],global_label("Introduction"),string_esc("Introduction"),[[],[raw_nl,[string_esc(" "),idx_env(use,cindex,localnum_label("0"),[string_esc("Platform independence")],[string_esc("Platform independence")]),string_esc(" "),string_esc("The increasing diversity of platforms used today and the diffusion of Internet and the World Wide Web makes compatibility between platforms a key factor to run the software everywhere with no change. Java seems to achieve this goal, using a bytecode intermediate language and a large library of platform-dependent and independent classes which fully implements many. On the other hand, Prolog provides a powerful implementation of logic programming paradigm. This document includes the reference manual of the Prolog/Java bidirectional interface implemented in Ciao. In addition, it has been developed an application of this interface that makes use of an object oriented extension of Prolog to encapsulate the java classes, O'Ciao, both the ones defined in the JDK as well as new classes developed in Java. These classes can be used in the object oriented prolog extension of Ciao just like native O'Ciao classes."),p([]),string_esc("The proposed interaction between both languages is realized as an interface between two processes, a Java process and a Prolog process, running separately. This approach allows the programmer to use of both Java and Prolog, without the compiler-dependent glue code used in other linkage-oriented approaches, and preserves the philosophy of Java as an independent language. The interface communication is based on a clean socket-based protocol, providing hardware and software independence. This allows also both processes to be run in different machines connected by a TCP/IP transport protocol, based on a client/server model that can evolve to a more cooperative model."),p([]),string_esc("The present manual includes reference information about the Prolog side of the bidirectional Java/Prolog interface. The Java side of this interface is explained in the HTML pages generated by Javadoc."),p([]),section_env([level(2)],local_label("Distributed Programming Model"),[string_esc("Distributed Programming Model")],[string_esc(" "),idx_env(use,cindex,localnum_label("1"),[string_esc("Distributed Programming Model")],[string_esc("Distributed Programming Model")]),string_esc(" "),string_esc("The differences between Prolog and Java impose the division of the interface in two main parts: a prolog-to-java and a java-to-prolog interfaces. Most of the applications that will use this interface will consider that will be a ``client' side that request actions and queries to a ``server' side, which accomplish the actions and answer the queries. In a first approach, any of the both one-way interfaces implement a pure client/server model: the server waits for a query, performs the received query and sleeps until the next query comes; the client starts the server, carries out the initial part of the job initiating all the conversations with the server, and requests the server to do some things sometimes."),p([]),string_esc("This model cannot handle correctly the tasks regarding an event oriented programming environment like java. A usual application of the prolog-to-java interface could be a graphical user interface server made in java, and a prolog client on the other side. A pure client/server model based on requests and results is not powerful enough to leave the prolog side managing all the application specific work of this example: some java specific stuff is needed to catch and manipulate properly the events thrown by the graphical user interface. This problem can be solved in a distributed context, on which both languages are clients and servers simultaneously, and can perform requests and do actions at a time. Using this model, the prolog side can add a prolog goal as listener of a specific event, and the java side launches that goal when the event raises."),p([]),string_esc("In any case, the client/server approach simplifies the design of the interface, so both interfaces have been designed in such way, but keeping in mind that the goal is to reach a distributed environment, so each side do the things it is best designed for."),p([])])],linebreak],[],[nop,nop,nop,nop]]),[component_link(javart),component_link(jtopl),component_link(javasock)],section_env([unnumbered,level(1),subfile(refs),is_special(references)],global_label("References"),string_esc("References"),[show_biblio]),[section_env([unnumbered,level(1),subfile(liindex),is_special(index)],global_label("Library/Module Index"),string_esc("Library/Module Index"),[string_esc([]),show_index(li)]),section_env([unnumbered,level(1),subfile(pdindex),is_special(index)],global_label("Predicate/Method Index"),string_esc("Predicate/Method Index"),[string_esc([]),show_index(pd)]),section_env([unnumbered,level(1),subfile(prindex),is_special(index)],global_label("Property Index"),string_esc("Property Index"),[string_esc([]),show_index(pr)]),section_env([unnumbered,level(1),subfile(teindex),is_special(index)],global_label("Regular Type Index"),string_esc("Regular Type Index"),[string_esc([]),show_index(te)]),section_env([unnumbered,level(1),subfile(deindex),is_special(index)],global_label("Declaration Index"),string_esc("Declaration Index"),[string_esc([]),show_index(de)]),section_env([unnumbered,level(1),subfile(coindex),is_special(index)],global_label("Concept Index"),string_esc("Concept Index"),[string_esc([]),show_index(co)]),section_env([unnumbered,level(1),subfile(auindex),is_special(index)],global_label("Author Index"),string_esc("Author Index"),[string_esc([]),show_index(au)]),section_env([unnumbered,level(1),subfile(glindex),is_special(index)],global_label("Global Index"),string_esc("Global Index"),[[raw_nl,[string_esc("This is a global index containing pointers to places where concepts, 
 predicates, modes, properties, types, applications, etc., are referred to
 in the text of the document.")],linebreak],show_index(gl)])]]).