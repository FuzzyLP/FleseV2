
@node Low-level Prolog to Java socket connection, References, Java to Prolog interface, Top
@comment node-name, next, previous, up
@chapter Low-level Prolog to Java socket connection
@liindex javasock
@glindex javasock

@b{Author(s):} 
@auindex Jesus Correas
@glindex Jesus Correas
Jes@'us Correas.



@coindex Socket implementation
@glindex Socket implementation 
This module defines a low-level socket interface, to be used by javart and jtopl. Includes all the code related directly to the handling of sockets. This library should not be used by any user program, because is a very low-level connection to Java. Use 
@glindex javart
@code{javart} (Prolog to Java interface) or 
@glindex jtopl
@code{jtopl} (Java to Prolog interface) libraries instead.


@section Usage and interface
@cartouche
@itemize @bullet
@item @b{Library usage:}

@code{:- use_module(library(javall/javasock)).}
@item @b{Exports:}

@itemize @minus
@item @i{Predicates:}

@glindex bind_socket_interface/1
@code{bind_socket_interface/1}, 
@glindex start_socket_interface/2
@code{start_socket_interface/2}, 
@glindex stop_socket_interface/0
@code{stop_socket_interface/0}, 
@glindex join_socket_interface/0
@code{join_socket_interface/0}, 
@glindex java_query/2
@code{java_query/2}, 
@glindex java_response/2
@code{java_response/2}, 
@glindex prolog_query/2
@code{prolog_query/2}, 
@glindex prolog_response/2
@code{prolog_response/2}, 
@glindex is_connected_to_java/0
@code{is_connected_to_java/0}, 
@glindex java_debug/1
@code{java_debug/1}, 
@glindex java_debug_redo/1
@code{java_debug_redo/1}, 
@glindex start_threads/0
@code{start_threads/0}.
@end itemize
@item @b{Imports:}

@itemize @minus
@item @i{Application modules:}

@glindex jtopl
@code{jtopl}.
@item @i{System library modules:}

@glindex fastrw
@code{fastrw}, 
@glindex sockets
@code{sockets}, 
@glindex format
@code{format}, 
@glindex concurrency
@code{concurrency}, 
@glindex sockets_io
@code{sockets_io}.
@item @i{Packages:}

@glindex prelude
@code{prelude}, 
@glindex nonpure
@code{nonpure}, 
@glindex condcomp
@code{condcomp}, 
@glindex assertions
@code{assertions}, 
@glindex regtypes
@code{regtypes}, 
@glindex isomodes
@code{isomodes}.
@end itemize
@end itemize
@end cartouche
@section Documentation on exports
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{bind_socket_interface/1 (pred)}}}
@temp
@end iftex
@pdindex bind_socket_interface/1
@glindex bind_socket_interface/1
@deffn PREDICATE bind_socket_interface/1:

@b{Usage:} @code{bind_socket_interface(Port)}

Given an port number, waits for a connection request from the Java side, creates the sockets to connect to the java process, and starts the threads needed to handle the connection.
@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{Port} is an integer.
@iftex
@hfill
@end iftex
 (basic_props:int/1)
@item @i{The following properties should hold at call time:}

@code{Port} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (term_typing:nonvar/1)
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{start_socket_interface/2 (pred)}}}
@temp
@end iftex
@pdindex start_socket_interface/2
@glindex start_socket_interface/2
@deffn PREDICATE start_socket_interface/2:

@b{Usage:} @code{start_socket_interface(Address,Stream)}

Given an address in format 'node:port', creates the sockets to connect to the java process, and starts the threads needed to handle the connection.
@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{Address} is any term.
@iftex
@hfill
@end iftex
 (basic_props:term/1)

@code{Stream} is an open stream.
@iftex
@hfill
@end iftex
 (streams_basic:stream/1)
@item @i{The following properties should hold at call time:}

@code{Address} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (term_typing:nonvar/1)

@code{Stream} is currently a term which is not a free variable.
@iftex
@hfill
@end iftex
 (term_typing:nonvar/1)
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{stop_socket_interface/0 (pred)}}}
@temp
@end iftex
@pdindex stop_socket_interface/0
@glindex stop_socket_interface/0
@deffn PREDICATE stop_socket_interface/0:

@b{Usage:} 

Closes the sockets to disconnect from the java process, and waits until the threads that handle the connection terminate.
@itemize @minus
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{join_socket_interface/0 (pred)}}}
@temp
@end iftex
@pdindex join_socket_interface/0
@glindex join_socket_interface/0
@deffn PREDICATE join_socket_interface/0:

@b{Usage:} 

Waits until the threads that handle the connection terminate.
@itemize @minus
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_query/2 (pred)}}}
@temp
@end iftex
@pdindex java_query/2
@glindex java_query/2
@deffn PREDICATE java_query/2:

@b{Usage:} @code{java_query(ThreadId,Query)}

Data predicate containing the queries to be sent to Java. First argument is the Prolog thread Id, and second argument is the query to send to Java.
@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{ThreadId} is an atom.
@iftex
@hfill
@end iftex
 (basic_props:atm/1)

@code{Query} is any term.
@iftex
@hfill
@end iftex
 (basic_props:term/1)
@end itemize

The predicate is of type @i{concurrent}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_response/2 (pred)}}}
@temp
@end iftex
@pdindex java_response/2
@glindex java_response/2
@deffn PREDICATE java_response/2:

@b{Usage:} @code{java_response(Id,Response)}

Data predicate that stores the responses to requests received from Java. First argument corresponds to the Prolog thread Id; second argument corresponds to the response itself.
@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{Id} is an atom.
@iftex
@hfill
@end iftex
 (basic_props:atm/1)

@code{Response} is any term.
@iftex
@hfill
@end iftex
 (basic_props:term/1)
@end itemize

The predicate is of type @i{concurrent}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prolog_query/2 (pred)}}}
@temp
@end iftex
@pdindex prolog_query/2
@glindex prolog_query/2
@deffn PREDICATE prolog_query/2:

@b{Usage:} @code{prolog_query(Id,Query)}

Data predicate that keeps a queue of the queries requested to Prolog side from Java side.
@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{Id} is an integer.
@iftex
@hfill
@end iftex
 (basic_props:int/1)

@code{Query} is any term.
@iftex
@hfill
@end iftex
 (basic_props:term/1)
@end itemize

The predicate is of type @i{concurrent}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{prolog_response/2 (pred)}}}
@temp
@end iftex
@pdindex prolog_response/2
@glindex prolog_response/2
@deffn PREDICATE prolog_response/2:

@b{Usage:} @code{prolog_response(Id,Response)}

Data predicate that keeps a queue of the responses to queries requested to Prolog side from Java side.
@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{Id} is an integer.
@iftex
@hfill
@end iftex
 (basic_props:int/1)

@code{Response} is any term.
@iftex
@hfill
@end iftex
 (basic_props:term/1)
@end itemize

The predicate is of type @i{concurrent}.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{is_connected_to_java/0 (pred)}}}
@temp
@end iftex
@pdindex is_connected_to_java/0
@glindex is_connected_to_java/0
@deffn PREDICATE is_connected_to_java/0:

@b{Usage:} 

Checks if the connection to Java is established.
@itemize @minus
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_debug/1 (pred)}}}
@temp
@end iftex
@pdindex java_debug/1
@glindex java_debug/1
@deffn PREDICATE java_debug/1:
No further documentation available for this predicate.
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{java_debug_redo/1 (pred)}}}
@temp
@end iftex
@pdindex java_debug_redo/1
@glindex java_debug_redo/1
@deffn PREDICATE java_debug_redo/1:
No further documentation available for this predicate.
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{start_threads/0 (pred)}}}
@temp
@end iftex
@pdindex start_threads/0
@glindex start_threads/0
@deffn PREDICATE start_threads/0:

@b{Usage:} 

Starts the threads that will handle the connection to Java. This predicate is declared public for internal purposes, and it is not intended to be used by a user program.
@itemize @minus
@end itemize
@end deffn
@sp 1

